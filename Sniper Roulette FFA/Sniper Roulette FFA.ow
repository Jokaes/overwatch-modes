settings
{
	main
	{
		Description: "Sniper Roulette FFA v2.0.0 - Kill to become the next sniper. After you kill with every sniper you come back to the first sniper until someone wins. Updated code & more: workshop.codes/sniperroulette         -Jokaes#2263"
		Mode Name: "Sniper Roulette FFA"
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Match Voice Chat: Enabled
		Max Spectators: 12
		Use Experimental Update If Available: Yes
	}

	modes
	{
		Deathmatch
		{
			disabled maps
			{
				Black Forest Winter
				Blizzard World Winter
				Ch√¢teau Guillard Halloween
				Ecopoint: Antarctica Winter
				Eichenwalde Halloween
				Hanamura Winter
				Hollywood Halloween
				Kanezaka
				King's Row Winter
				Lijiang Control Center Lunar New Year
				Lijiang Garden Lunar New Year
				Lijiang Night Market Lunar New Year
				Malevento
				Route 66
				Workshop Chamber
				Workshop Expanse
				Workshop Expanse Night
				Workshop Green Screen
				Workshop Island
				Workshop Island Night
			}
		}

		General
		{
			Allow Hero Switching: Disabled
			Game Mode Start: Immediately
			Limit Roles: 2 Of Each Role Per Team
			Respawn As Random Hero: Enabled
			Spawn Health Packs: Disabled
		}
	}

	heroes
	{
		General
		{
			Quick Melee: Disabled

			Ana
			{
				Biotic Grenade: Disabled
				No Automatic Fire: Enabled
				Quick Melee: Disabled
			}

			Ashe
			{
				Dynamite: Disabled
				No Automatic Fire: Enabled
				Quick Melee: Disabled
			}

			Hanzo
			{
				Quick Melee: Disabled
				Storm Arrows: Disabled
			}

			Widowmaker
			{
				No Automatic Fire: Enabled
				Quick Melee: Disabled
				Venom Mine: Disabled
			}

			enabled heroes
			{
				Ana
				Ashe
				Hanzo
				Widowmaker
			}
		}
	}
}

variables
{
	global:
		19: timeCounter
}

rule("Hero List")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.L = Hero(Ana);
		Modify Global Variable(L, Append To Array, Hero(Ashe));
		Modify Global Variable(L, Append To Array, Hero(Hanzo));
		Modify Global Variable(L, Append To Array, Hero(Widowmaker));
		Global.L = Randomized Array(Global.L);
	}
}

rule("Player HUD")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Create HUD Text(Filtered Array(Event Player, Hero Of(Event Player) != Global.L[0]), Hero Icon String(Global.L[0]), Null, Null,
			Left, 0, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Hero Of(Event Player) != Global.L[1]), Hero Icon String(Global.L[1]), Null, Null,
			Left, 1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Hero Of(Event Player) != Global.L[2]), Hero Icon String(Global.L[2]), Null, Null,
			Left, 2, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Hero Of(Event Player) != Global.L[3]), Hero Icon String(Global.L[3]), Null, Null,
			Left, 3, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Hero Of(Event Player) == Global.L[0]), Hero Icon String(Global.L[0]), String(
			"Current Hero"), Null, Left, 0, Color(Blue), Color(Blue), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Hero Of(Event Player) == Global.L[1]), Hero Icon String(Global.L[1]), String(
			"Current Hero"), Null, Left, 1, Color(Blue), Color(Blue), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Hero Of(Event Player) == Global.L[2]), Hero Icon String(Global.L[2]), String(
			"Current Hero"), Null, Left, 2, Color(Blue), Color(Blue), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Hero Of(Event Player) == Global.L[3]), Hero Icon String(Global.L[3]), String(
			"Current Hero"), Null, Left, 3, Color(Blue), Color(Blue), Color(White), Visible To and String, Default Visibility);
	}
}

rule("Global HUD")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		disabled Create HUD Text(All Players(All Teams), Null, Null, Custom String(" \r\n		\r\n		\r\n		\r\n		\r\n		\r\n		"), Right, -999, Color(
			White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("CODE: 4ASVS"), Null, Null, Right, -998, Color(White), Color(White), Color(
			White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String(" "), Custom String("Sniper Roulette FFA v2.0.0"), Right, -997, Color(
			White), Color(White), Color(Team 1), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Find all my codes in: jokaes.github.io"), Right, -996, Color(
			White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String("Created by Jokaes#2263"), Null, Right, -995, Color(White), Color(
			White), Color(White), Visible To and String, Default Visibility);
	}
}

rule("Skip assembling heroes")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Set Match Time(0);
	}
}

rule("Time Counter - Add minute")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Disable Built-In Game Mode Music;
		Pause Match Time;
		Global.timeCounter += True;
		Set Match Time(Global.timeCounter);
		Wait(60, Ignore Condition);
		Loop;
	}
}

rule("Start forcing hero L[0]")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Global.L[0]);
		Event Player.D = 0;
	}
}

rule("Ult keeper")
{
	event
	{
		Player Dealt Final Blow;
		All;
		All;
	}

	actions
	{
		Event Player.U = Ultimate Charge Percent(Event Player);
		Wait(1, Ignore Condition);
		Set Ultimate Charge(Event Player, Event Player.U);
	}
}

rule("Next sniper")
{
	event
	{
		Player Dealt Final Blow;
		All;
		All;
	}

	actions
	{
		Skip If(Event Player.D == 4, 1);
		Event Player.D += 1;
		Skip If(Event Player.D != 4, 1);
		Event Player.D = 0;
		Wait(0.125, Ignore Condition);
		Start Forcing Player To Be Hero(Event Player, Global.L[Event Player.D]);
	}
}

rule("Effects and text")
{
	event
	{
		Player Dealt Final Blow;
		All;
		All;
	}

	actions
	{
		disabled Small Message(Event Player, String("{0} m", Distance Between(Event Player, Victim)));
		Small Message(Event Player, String("{0} {1}", String("{0} m", Distance Between(Event Player, Victim)), Icon String(Skull)));
		Create In-World Text(All Players(All Teams), Hero Icon String(Global.L[Event Player.D]), Event Player, 1, Clip Against Surfaces,
			Visible To Position and String, Color(White), Default Visibility);
		Event Player.I = Last Text ID;
		Wait(0.130, Ignore Condition);
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(Purple), Event Player, 1);
		Create Effect(All Players(All Teams), Sparkles, Color(Purple), Event Player, 1, Visible To Position and Radius);
		Event Player.F = Last Created Entity;
		Wait(1.500, Ignore Condition);
		Destroy In-World Text(Event Player.I);
		Destroy Effect(Event Player.F);
	}
}

rule("No Ashe or Hanzo Ult")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Ashe) || Hero Of(Event Player) == Hero(Hanzo)) == True;
	}

	actions
	{
		Disallow Button(Event Player, Button(Ultimate));
	}
}

rule("No Ashe or Hanzo Ult - Message")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Ashe) || Hero Of(Event Player) == Hero(Hanzo)) == True;
		Is Button Held(Event Player, Button(Ultimate)) == True;
	}

	actions
	{
		Small Message(Event Player, String("{0} {1} {2}", String("No"), Hero Of(Event Player), String("Ultimate Ability")));
	}
}

rule("Ana or Widow Ult")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Ana) || Hero Of(Event Player) == Hero(Widowmaker)) == True;
	}

	actions
	{
		Allow Button(Event Player, Button(Ultimate));
	}
}

disabled rule("Dummy (TEST)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Create Dummy Bot(Global.L[0], All Teams, -1, Position Of(Event Player), Vector(0, 0, 0));
	}
}

disabled rule("Created by Jokaes#2263")
{
	event
	{
		Ongoing - Global;
	}
}